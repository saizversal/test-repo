AWSTemplateFormatVersion: "2010-09-09"
Description: Create IAM role for GitHub Actions runner in the app-auth project.
Parameters:
  ProjectName:
    Type: String
    Description: "The project name all lowercase and kebab-case"
    ConstraintDescription: "ProjectName must be lower case with dashes between each word"
    MinLength: 5
  RepositoryName:
    Type: String
    Description: "The name of the GitHub repository used during deployment"
  GitBranch:
    Type: String
    Description: "The branch name used during deployment"
  AwsAccountId:
    Type: String
    Description: "The aws account number to deploy into"
    MinLength: 5
  AwsRegion:
    Type: String
    Description: "The aws AwsRegion to deploy into"

  OidcProviderName:
    Type: String
    Description: "The name given to the OIDC provider (github)"
    Default: "token.actions.githubusercontent.com" # in nonprod, we gave it this name
    MinLength: 5
Resources:
  AuthCICDPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["", [!Ref ProjectName, "-cicd-pipeline-role"]]
      Description: "IAM role for GitHub Actions CI/CD pipeline for ${ProjectName}."
      AssumeRolePolicyDocument: !Sub |
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Federated": "arn:aws:iam::${AwsAccountId}:oidc-provider/${OidcProviderName}"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                        "StringLike": {
                            "${OidcProviderName}:aud": "sts.amazonaws.com",
                            "${OidcProviderName}:sub": "repo:zversal-ecom/${RepositoryName}:*"
                        }
                    }
                }
            ]
        }
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName
        # - Key: GitBranch
        #   Value: !Ref GitBranch
        - Key: RepositoryName
          Value: !Ref RepositoryName
      PermissionsBoundary: !Sub "arn:aws:iam::${AwsAccountId}:policy/zversal-lambda-permission-boundary-maxreach-dev"
      Policies:
        - PolicyName: !Join ["", [!Ref ProjectName, "-cicd-runner-permissions"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Allow GitHub Actions to get caller identity
              - Sid: GetCallerIdentity
                Effect: Allow
                Action:
                  - "sts:GetCallerIdentity"
                Resource: "*"
              # Allow passing ECS task execution role (if needed)
              - Sid: PassECSTaskExecutionRole
                Effect: Allow
                Action: "iam:PassRole"
                Resource: !Sub "arn:aws:iam::${AwsAccountId}:role/ecsTaskExecutionRole"
              - Sid: LambdaListFunctions
                Effect: Allow
                Action: 
                  - lambda:List*
                  - lambda:ListFunctions 
                Resource: "*"
              # Lambda deployment permissions (minimized, no duplicates)
              - Sid: LambdaDeployment
                Effect: Allow
                Action:
                  - lambda:Get*
                  - lambda:List*
                  - lambda:ListFunctions 
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:UpdateFunctionConfiguration
                  - lambda:UpdateFunctionCode
                  - lambda:CreateAlias
                  - lambda:DeleteAlias
                  - lambda:UpdateAlias
                  - lambda:AddPermission
                  - lambda:RemovePermission
                  - lambda:InvokeFunction
                  - lambda:PutProvisionedConcurrencyConfig
                  - lambda:UpdateEventSourceMapping
                  - lambda:PublishVersion
                  - lambda:TagResource
                Resource:
                  - !Sub "arn:aws:lambda:${AwsRegion}:${AwsAccountId}:function:${ProjectName}-*"
                  - !Sub "arn:aws:lambda:${AwsRegion}:${AwsAccountId}:event-source-mapping:*"
              # CloudFront permissions (minimized, no wildcard action)
              - Sid: CloudFrontManagement
                Effect: Allow
                Action:
                  - cloudfront:CreateCloudFrontOriginAccessIdentity
                  - cloudfront:TagResource
                  - cloudfront:CreateDistribution
                  - cloudfront:DeleteDistribution
                  - cloudfront:DeleteCloudFrontOriginAccessIdentity
                  - cloudfront:UpdateCloudFrontOriginAccessIdentity
                  - cloudfront:UpdateDistribution
                  - cloudfront:CreateInvalidation
                  - cloudfront:GetDistribution
                  - cloudfront:GetDistributionConfig
                  - cloudfront:ListCloudFrontOriginAccessIdentities
                  - cloudfront:ListDistributions
                  - cloudfront:ListDistributionsByLambdaFunction
                  - cloudfront:ListDistributionsByWebACLId
                  - cloudfront:ListFieldLevelEncryptionConfigs
                  - cloudfront:ListFieldLevelEncryptionProfiles
                  - cloudfront:ListInvalidations
                  - cloudfront:ListPublicKeys
                  - cloudfront:ListStreamingDistributions
                Resource:
                  - !Sub "arn:aws:cloudfront::${AwsAccountId}:distribution/*"
                  - !Sub "arn:aws:cloudfront::${AwsAccountId}:origin-access-identity/*"
                  - !Sub "arn:aws:cloudfront::${AwsAccountId}:streaming-distribution/*"
              # S3 bucket management (scoped to project buckets)
              - Sid: S3ProjectBuckets
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutBucketPolicy
                  - s3:DeleteBucketPolicy
                  - s3:PutEncryptionConfiguration
                  - s3:PutBucketVersioning
                  - s3:PutBucketCORS
                  - s3:PutBucketTagging
                  - s3:PutBucketPublicAccessBlock
                  - s3:GetBucketWebsite
                  - s3:PutBucketWebsite
                  - s3:DeleteBucketWebsite
                Resource:
                  - !Sub "arn:aws:s3:::${ProjectName}*"
                  - !Sub "arn:aws:s3:::${ProjectName}-*"
                  - !Sub "arn:aws:s3:::${ProjectName}*/*"
              # IAM role management for Lambda execution roles
              - Sid: LambdaExecutionRoles
                Effect: Allow
                Action:
                  - iam:Get*
                  - iam:List*
                  - iam:PassRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:PutRolePolicy
                  - iam:TagRole
                  - iam:UntagRole
                  - iam:DetachRolePolicy
                  - iam:CreatePolicy
                Resource:
                  - !Sub "arn:aws:iam::${AwsAccountId}:role/${ProjectName}-*"
              # CloudFormation stack management
              - Sid: CloudFormationManagement
                Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:ListStackResources
                  - cloudformation:SetStackPolicy
                  - cloudformation:UpdateStack
                  - cloudformation:UpdateTerminationProtection
                  - cloudformation:GetTemplate
                Resource:
                  - !Sub "arn:aws:cloudformation:${AwsRegion}:${AwsAccountId}:stack/${ProjectName}-*"
              # API Gateway management
              - Sid: APIGatewayV2
                Effect: Allow
                Action:
                  - apigateway:POST
                  - apigateway:PUT
                  - apigateway:PATCH
                  - apigateway:DELETE
                  - apigateway:GET
                  - apigateway:TagResource
                  - apigateway:UpdateRestApiPolicy
                Resource:
                  - !Sub "arn:aws:apigateway:${AwsRegion}::/*"
              # DynamoDB listing and table management
              - Sid: DynamoListing
                Effect: Allow
                Action:
                  - dynamodb:List*
                  - dynamodb:DescribeReservedCapacity*
                  - dynamodb:DescribeLimits
                  - dynamodb:DescribeTimeToLive
                Resource: "*"
              - Sid: DynamoTableManagement
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub "arn:aws:dynamodb:${AwsRegion}:${AwsAccountId}:table/${ProjectName}-*"
              # VPC management (scoped where possible)
              - Sid: VpcManagement
                Effect: Allow
                Action:
                  - ec2:CreateVpc
                  - ec2:DeleteVpc
                  - ec2:DescribeVpcs
                  - ec2:CreateSubnet
                  - ec2:DeleteSubnet
                  - ec2:DescribeSubnets
                  - ec2:CreateRouteTable
                  - ec2:DeleteRouteTable
                  - ec2:AssociateRouteTable
                  - ec2:DisassociateRouteTable
                  - ec2:CreateRoute
                  - ec2:DeleteRoute
                  - ec2:DescribeRouteTables
                  - ec2:AttachInternetGateway
                  - ec2:DetachInternetGateway
                  - ec2:CreateInternetGateway
                  - ec2:DeleteInternetGateway
                  - ec2:DescribeInternetGateways
                  - ec2:CreateVpcEndpoint
                  - ec2:DeleteVpcEndpoints
                  - ec2:DescribeVpcEndpoints
                  - ec2:ModifyVpcEndpoint
                  - ec2:CreateSecurityGroup
                  - ec2:DeleteSecurityGroup
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:DescribeSecurityGroups
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - ec2:ModifyVpcAttribute
                  - ec2:DescribeAvailabilityZones
                  - ec2:ModifySubnetAttribute
                Resource: "*"
              - Sid: VpcAttributeModification
                Effect: Allow
                Action:
                  - ec2:ModifyVpcAttribute
                Resource:
                  - !Sub "arn:aws:ec2:${AwsRegion}:${AwsAccountId}:vpc/vpc-*"
              - Sid: SubnetAttributeModification
                Effect: Allow
                Action:
                  - ec2:ModifySubnetAttribute
                Resource:
                  - !Sub "arn:aws:ec2:${AwsRegion}:${AwsAccountId}:subnet/subnet-*"
              # CloudWatch Logs management
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:Get*
                  - logs:Describe*
                  - logs:List*
                  - logs:CreateLogGroup
                  - logs:DeleteLogGroup
                  - logs:PutResourcePolicy
                  - logs:DeleteResourcePolicy
                  - logs:PutRetentionPolicy
                  - logs:DeleteRetentionPolicy
                  - logs:TagLogGroup
                  - logs:UntagLogGroup
                  - logs:CreateLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:TagResource
                  - logs:UntagResource
                Resource: "*"
              # S3 bucket listing (all buckets, consider restricting if possible)
              - Sid: S3ListAllBuckets
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListBucket
                Resource: "*"
              # Cognito permissions (minimized, only ListUsers)
              - Sid: CognitoListUsers
                Effect: Allow
                Action:
                  - cognito-idp:*
                Resource: "*"
      
              # SES permissions (minimized, if possible restrict to project-specific identities)
              #SesPermission
              - Effect: Allow
                Action:
                  - ses:SendRawEmail
                  - ses:GetSendQuota
                  - ses:GetSendStatistics
                  - ses:ListIdentities
                  - ses:ListVerifiedEmailAddresses
                  - ses:VerifyEmailIdentity
                  - ses:GetIdentityVerificationAttributes
                Resource: "*"

              - Sid: LambdaVersionPublish
                Effect: Allow
                Action:
                  - lambda:PublishVersion
                Resource: !Sub "arn:aws:lambda:${AwsRegion}:${AwsAccountId}:function:zversal-auth-custom-authorizer"

              - Sid: LambdaVersionManagement
                Effect: Allow
                Action:
                  - lambda:PutRuntimeManagementConfig
                Resource: !Sub "arn:aws:lambda:${AwsRegion}:${AwsAccountId}:function:zversal-auth-custom-authorizer:*"